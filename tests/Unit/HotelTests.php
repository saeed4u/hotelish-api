<?php

namespace Tests\Feature;

use App\Country;
use App\Hotel;
use App\Service\HotelService;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class HotelTests extends TestCase
{
    /**
     * @var Hotel $hotel
     */
    private $hotel;

    /**
     * @var HotelService $hotelService
     */
    private $hotelService;

    public function testGetHotelExpectSuccess()
    {
        /**
         * @var JsonResponse
         */
        $createdHotel = $this->hotelService->getHotels();
        self::assertEquals(200, $createdHotel->status());
    }

    public function testUpdateHotelExpectSuccess()
    {
        $updatePayload = ['name' => 'Updated name'];
        $updatedHotel = $this->hotelService->updateHotel($updatePayload);

        self::assertEquals(200, $updatedHotel->status());
        self::assertEquals('Updated name',$updatedHotel->getData()->hotel->name);
    }

    protected function setUp()
    {
        parent::setUp();
        $this->hotelService = $this->app->make(HotelService::class);
        $this->createHotel();
    }

    private function createHotel()
    {
        $this->createCountry();
        $this->hotel = new Hotel();
        $hotel = $this->hotel;
        $hotel->name = 'Test hotel';
        $hotel->email = 'hotel@email.com';
        $hotel->address = '112 address';
        $hotel->city = 'Accra';
        $hotel->country_id = 1;
        $hotel->zip_code = '00233';
        $hotel->state = 'Greater Accra';
        $hotel->phone_number = '+233502315886';
        $hotel->save();
        $this->hotel = $hotel->refresh();
    }

    private function createCountry()
    {
        $country = new Country();
        $country->name = 'Ghana';
        $country->iso_code = 'GH';
        $country->save();
    }

    protected function tearDown()
    {
        DB::table('countries')->truncate();
        if ($this->hotel) {
            $this->hotel->forceDelete();
        }
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
