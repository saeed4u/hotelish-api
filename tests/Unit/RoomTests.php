<?php
/**
 * Created by PhpStorm.
 * User: brasaeed
 * Date: 2019-06-26
 * Time: 14:44
 */

namespace Tests\Unit;


use App\Hotel;
use App\Room;
use App\RoomType;
use App\Service\RoomService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class RoomTests extends TestCase
{
    /**
     * @var Room
     */
    private $room;

    /**
     * @var RoomService $service
     */
    private $service;

    public function testCreateRoomExpectSuccess()
    {
        $payload = [
            'name' => 'Room 1',
            'room_type_id' => $this->createRoomType()->id
        ];
        $result = $this->service->addRoom($payload);
        self::assertEquals(200, $result->status());
    }

    private function createRoomType()
    {
        $roomType = new RoomType();
        $roomType->name = 'Type 1';
        $roomType->save();
        return $roomType;
    }

    public function testGetRoomsExpectSuccess()
    {
        $this->createRoom();
        $rooms = $this->service->getAll();
        $room = $rooms->getData()->rooms[0];
        self::assertEquals($this->room->id, $room->id);
        self::assertEquals($this->room->name, $room->name);
    }

    private function createRoom()
    {

        $this->room = new Room();
        $this->room->name = 'Room 1';
        $this->room->room_type_id = $this->createRoomType()->id;
        $this->room->hotel_id = Hotel::first()->id;
        $this->room->save();

    }

    public function testUpDateRoom()
    {
        $this->createRoom();
        $this->service->updateRoom($this->room, ['name' => 'updated name']);
        $this->room = $this->room->refresh();
        self::assertEquals('updated name', $this->room->name);
    }

    public function testDeleteRoom()
    {
        $this->createRoom();
        $this->service->deleteRoom($this->room);
        $rooms = $this->service->getAll();
        self::assertEquals([], $rooms->getData()->rooms);
    }

    public function testCreateRoomExpectFailure()
    {
        $payload = [
            'name' => 'Room 1',
        ];
        $result = $this->service->addRoom($payload);
        self::assertNotEquals(200, $result->status());
    }

    protected function setUp()
    {
        parent::setUp();
        $this->service = $this->app->make(RoomService::class);
    }

    protected function tearDown()
    {
        Schema::disableForeignKeyConstraints();
        DB::table('rooms')->truncate();
        DB::table('room_types')->truncate();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}