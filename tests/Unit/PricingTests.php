<?php
/**
 * Created by PhpStorm.
 * User: brasaeed
 * Date: 2019-06-26
 * Time: 15:46
 */

namespace Tests\Unit;


use App\Pricing;
use App\RoomType;
use App\Service\PricingService;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class PricingTests extends TestCase
{
    /**
     * @var Pricing
     */
    private $pricing;

    /**
     * @var PricingService $service
     */
    private $service;

    public function testCreatePricingExpectSuccess()
    {
        $payload = [
            'price' => 200,
            'room_type_id' => $this->createRoomType()->id
        ];
        $result = $this->service->addPricing($payload);
        self::assertEquals(200, $result->status());
    }

    public function testGetPricingExpectSuccess()
    {
        $this->createPricing();
        $pricings = $this->service->getAll();
        $pricing = $pricings->getData()->pricings[0];
        self::assertEquals($this->pricing->id, $pricing->id);
    }

    private function createPricing()
    {

        $this->pricing = new Pricing();
        $this->pricing->price = 200;
        $this->pricing->room_type_id = $this->createRoomType()->id;
        $this->pricing->save();

    }

    private function createRoomType()
    {
        $roomType = new RoomType();
        $roomType->name = 'Type 1';
        $roomType->save();
        return $roomType;
    }


    public function testUpDatePricing()
    {
        $this->createPricing();
        $this->service->updatePricing($this->pricing, ['price' => 300]);
        $this->pricing = $this->pricing->refresh();
        self::assertEquals(300, $this->pricing->price);
    }

    public function testDeletePricing()
    {
        $this->createPricing();
        $this->service->deletePricing($this->pricing);
        $pricings = $this->service->getAll();
        self::assertEquals([], $pricings->getData()->pricings);
    }

    public function testCreatePricingExpectFailure()
    {
        $payload = [
            'price' => 200,
        ];
        $result = $this->service->addPricing($payload);
        self::assertNotEquals(200, $result->status());
    }

    protected function setUp()
    {
        parent::setUp();
        $this->service = $this->app->make(PricingService::class);
    }

    protected function tearDown()
    {
        Schema::disableForeignKeyConstraints();
        DB::table('pricings')->truncate();
        DB::table('room_types')->truncate();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}